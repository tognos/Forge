//
//  Yolo2.swift
//  YOLO
//
//  Created by Pavel Mayer on 25.08.17.
//  Copyright Â© 2017 MachineThink. All rights reserved.
//

import Foundation

import MetalPerformanceShaders
import Forge

/*
 The yolo-coco network from YOLOv2. https://pjreddie.com/darknet/yolo/
 
 This implementation is cobbled together from the following sources:
 
 - https://github.com/pjreddie/darknet
 - https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/android/src/org/tensorflow/demo/TensorFlowYoloDetector.java
 - https://github.com/allanzelener/YAD2K
 */

class YOLO2: YOLO {
  typealias PredictionType = YOLO.Prediction
  
  let yolo_anchors: [Float] = [0.57273, 0.677385, 1.87446, 2.06253, 3.33843, 5.47434, 7.88282, 3.52778, 9.77052, 9.16828]
  
  public init(device: MTLDevice, inflightBuffers: Int) {
    // Note: YOLO expects the input pixels to be in the range 0-1. Our input
    // texture most likely has pixels with values 0-255. However, since Forge
    // uses .float16 as the channel format the Resize layer will automatically
    // convert the pixels to be between 0 and 1.
    let inputWidth = 608
    let inputHeight = 608
    /*
    // begin of autogenerated forge net generation code
     var model:Model

    let leaky = MPSCNNNeuronReLU(device: device, a: 0.1)
    let input = Input()
    let input_1 = input --> Resize(width: 608, height: 608)
    
    let conv2d_1 = Convolution(kernel: (3, 3), channels: 32, stride: (1, 1), padding: .same, activation: leaky, name: "conv2d_1")
    let max_pooling2d_1 = MaxPooling(kernel: (2, 2), stride: (2, 2), padding: .same,edgeMode: .clamp, name: "max_pooling2d_1")
    let conv2d_2 = Convolution(kernel: (3, 3), channels: 64, stride: (1, 1), padding: .same, activation: leaky, name: "conv2d_2")
    let max_pooling2d_2 = MaxPooling(kernel: (2, 2), stride: (2, 2), padding: .same,edgeMode: .clamp, name: "max_pooling2d_2")
    let conv2d_3 = Convolution(kernel: (3, 3), channels: 128, stride: (1, 1), padding: .same, activation: leaky, name: "conv2d_3")
    let conv2d_4 = Convolution(kernel: (1, 1), channels: 64, stride: (1, 1), padding: .same, activation: leaky, name: "conv2d_4")
    let conv2d_5 = Convolution(kernel: (3, 3), channels: 128, stride: (1, 1), padding: .same, activation: leaky, name: "conv2d_5")
    let max_pooling2d_3 = MaxPooling(kernel: (2, 2), stride: (2, 2), padding: .same,edgeMode: .clamp, name: "max_pooling2d_3")
    let conv2d_6 = Convolution(kernel: (3, 3), channels: 256, stride: (1, 1), padding: .same, activation: leaky, name: "conv2d_6")
    let conv2d_7 = Convolution(kernel: (1, 1), channels: 128, stride: (1, 1), padding: .same, activation: leaky, name: "conv2d_7")
    let conv2d_8 = Convolution(kernel: (3, 3), channels: 256, stride: (1, 1), padding: .same, activation: leaky, name: "conv2d_8")
    let max_pooling2d_4 = MaxPooling(kernel: (2, 2), stride: (2, 2), padding: .same,edgeMode: .clamp, name: "max_pooling2d_4")
    let conv2d_9 = Convolution(kernel: (3, 3), channels: 512, stride: (1, 1), padding: .same, activation: leaky, name: "conv2d_9")
    let conv2d_10 = Convolution(kernel: (1, 1), channels: 256, stride: (1, 1), padding: .same, activation: leaky, name: "conv2d_10")
    let conv2d_11 = Convolution(kernel: (3, 3), channels: 512, stride: (1, 1), padding: .same, activation: leaky, name: "conv2d_11")
    let conv2d_12 = Convolution(kernel: (1, 1), channels: 256, stride: (1, 1), padding: .same, activation: leaky, name: "conv2d_12")
    let conv2d_13 = Convolution(kernel: (3, 3), channels: 512, stride: (1, 1), padding: .same, activation: leaky, name: "conv2d_13")
    let max_pooling2d_5 = MaxPooling(kernel: (2, 2), stride: (2, 2), padding: .same,edgeMode: .clamp, name: "max_pooling2d_5")
    let conv2d_14 = Convolution(kernel: (3, 3), channels: 1024, stride: (1, 1), padding: .same, activation: leaky, name: "conv2d_14")
    let conv2d_15 = Convolution(kernel: (1, 1), channels: 512, stride: (1, 1), padding: .same, activation: leaky, name: "conv2d_15")
    let conv2d_16 = Convolution(kernel: (3, 3), channels: 1024, stride: (1, 1), padding: .same, activation: leaky, name: "conv2d_16")
    let conv2d_17 = Convolution(kernel: (1, 1), channels: 512, stride: (1, 1), padding: .same, activation: leaky, name: "conv2d_17")
    let conv2d_18 = Convolution(kernel: (3, 3), channels: 1024, stride: (1, 1), padding: .same, activation: leaky, name: "conv2d_18")
    let conv2d_19 = Convolution(kernel: (3, 3), channels: 1024, stride: (1, 1), padding: .same, activation: leaky, name: "conv2d_19")
    let conv2d_21 = Convolution(kernel: (1, 1), channels: 64, stride: (1, 1), padding: .same, activation: leaky, name: "conv2d_21")
    let conv2d_20 = Convolution(kernel: (3, 3), channels: 1024, stride: (1, 1), padding: .same, activation: leaky, name: "conv2d_20")
    let space_to_depth_x2 = SpaceToDepthX2(name: "space_to_depth_x2")
    let conv2d_22 = Convolution(kernel: (3, 3), channels: 1024, stride: (1, 1), padding: .same, activation: leaky, name: "conv2d_22")
    let conv2d_23 = Convolution(kernel: (1, 1), channels: 425, stride: (1, 1), padding: .same, activation: nil, name: "conv2d_23")
    
    do {
      //        let conv2d_1 = input_1 --> conv2d_1
      //        conv2d_1.imageIsTemporary = false
      //        debugOut = conv2d_1
      //
      //        let conv2d_13 = conv2d_1 --> max_pooling2d_1 --> conv2d_2 --> max_pooling2d_2 --> conv2d_3 --> conv2d_4 --> conv2d_5 --> max_pooling2d_3 --> conv2d_6 --> conv2d_7 --> conv2d_8 --> max_pooling2d_4 --> conv2d_9 --> conv2d_10 --> conv2d_11 --> conv2d_12 --> conv2d_13
      let conv2d_13 = input_1 --> conv2d_1 --> max_pooling2d_1 --> conv2d_2 --> max_pooling2d_2 --> conv2d_3 --> conv2d_4 --> conv2d_5 --> max_pooling2d_3 --> conv2d_6 --> conv2d_7 --> conv2d_8 --> max_pooling2d_4 --> conv2d_9 --> conv2d_10 --> conv2d_11 --> conv2d_12 --> conv2d_13
      let space_to_depth_x2 = conv2d_13 --> conv2d_21 --> space_to_depth_x2
      let conv2d_20 = conv2d_13 --> max_pooling2d_5 --> conv2d_14 --> conv2d_15 --> conv2d_16 --> conv2d_17 --> conv2d_18 --> conv2d_19 --> conv2d_20
      let concatenate_1 = Concatenate([space_to_depth_x2, conv2d_20])
      let conv2d_23 = concatenate_1 --> conv2d_22 --> conv2d_23
      let output = conv2d_23
      model = Model(input: input, output: output)
      
    }
    let success = model.compile(device: device, inflightBuffers: inflightBuffers) {
      name, count, type in ParameterLoaderBundle(name: name,
                                                 count: count,
                                                 suffix: type == .weights ? ".weights" : ".biases",
                                                 ext: "bin")
    }
    
    // end of autogenerated forge net generation code
 */
    var model:Model

    // begin of autogenerated forge net generation code
    
    let leaky = MPSCNNNeuronReLU(device: device, a: 0.10000)
    let input = Input()
    let input_1 = input --> Resize(width: 608, height: 608)
    let conv2d_1 = Convolution(kernel: (3, 3), channels: 32, activation: leaky, name: "conv2d_1")
    let max_pooling2d_1 = MaxPooling(kernel: (2, 2), stride: (2, 2), padding: .same, name: "max_pooling2d_1")
    let conv2d_2 = Convolution(kernel: (3, 3), channels: 64, activation: leaky, name: "conv2d_2")
    let max_pooling2d_2 = MaxPooling(kernel: (2, 2), stride: (2, 2), padding: .same, name: "max_pooling2d_2")
    let conv2d_3 = Convolution(kernel: (3, 3), channels: 128, activation: leaky, name: "conv2d_3")
    let conv2d_4 = Convolution(kernel: (1, 1), channels: 64, activation: leaky, name: "conv2d_4")
    let conv2d_5 = Convolution(kernel: (3, 3), channels: 128, activation: leaky, name: "conv2d_5")
    let max_pooling2d_3 = MaxPooling(kernel: (2, 2), stride: (2, 2), padding: .same, name: "max_pooling2d_3")
    let conv2d_6 = Convolution(kernel: (3, 3), channels: 256, activation: leaky, name: "conv2d_6")
    let conv2d_7 = Convolution(kernel: (1, 1), channels: 128, activation: leaky, name: "conv2d_7")
    let conv2d_8 = Convolution(kernel: (3, 3), channels: 256, activation: leaky, name: "conv2d_8")
    let max_pooling2d_4 = MaxPooling(kernel: (2, 2), stride: (2, 2), padding: .same, name: "max_pooling2d_4")
    let conv2d_9 = Convolution(kernel: (3, 3), channels: 512, activation: leaky, name: "conv2d_9")
    let conv2d_10 = Convolution(kernel: (1, 1), channels: 256, activation: leaky, name: "conv2d_10")
    let conv2d_11 = Convolution(kernel: (3, 3), channels: 512, activation: leaky, name: "conv2d_11")
    let conv2d_12 = Convolution(kernel: (1, 1), channels: 256, activation: leaky, name: "conv2d_12")
    let conv2d_13 = Convolution(kernel: (3, 3), channels: 512, activation: leaky, name: "conv2d_13")
    let max_pooling2d_5 = MaxPooling(kernel: (2, 2), stride: (2, 2), padding: .same, name: "max_pooling2d_5")
    let conv2d_14 = Convolution(kernel: (3, 3), channels: 1024, activation: leaky, name: "conv2d_14")
    let conv2d_15 = Convolution(kernel: (1, 1), channels: 512, activation: leaky, name: "conv2d_15")
    let conv2d_16 = Convolution(kernel: (3, 3), channels: 1024, activation: leaky, name: "conv2d_16")
    let conv2d_17 = Convolution(kernel: (1, 1), channels: 512, activation: leaky, name: "conv2d_17")
    let conv2d_18 = Convolution(kernel: (3, 3), channels: 1024, activation: leaky, name: "conv2d_18")
    let conv2d_19 = Convolution(kernel: (3, 3), channels: 1024, activation: leaky, name: "conv2d_19")
    let conv2d_21 = Convolution(kernel: (1, 1), channels: 64, activation: leaky, name: "conv2d_21")
    let conv2d_20 = Convolution(kernel: (3, 3), channels: 1024, activation: leaky, name: "conv2d_20")
    let space_to_depth_x2 = SpaceToDepthX2(name: "space_to_depth_x2")
    let conv2d_22 = Convolution(kernel: (3, 3), channels: 1024, activation: leaky, name: "conv2d_22")
    let conv2d_23 = Convolution(kernel: (1, 1), channels: 425, name: "conv2d_23")
    
    do {
        let conv2d_13 = input_1 --> conv2d_1 --> max_pooling2d_1 --> conv2d_2 --> max_pooling2d_2
            --> conv2d_3 --> conv2d_4 --> conv2d_5 --> max_pooling2d_3 --> conv2d_6 --> conv2d_7 --> conv2d_8
            --> max_pooling2d_4 --> conv2d_9 --> conv2d_10 --> conv2d_11 --> conv2d_12 --> conv2d_13
        let conv2d_20 = conv2d_13 --> max_pooling2d_5 --> conv2d_14 --> conv2d_15 --> conv2d_16
            --> conv2d_17 --> conv2d_18 --> conv2d_19 --> conv2d_20
        let space_to_depth_x2 = conv2d_13 --> conv2d_21 --> space_to_depth_x2
        let concatenate_1 = Concatenate([space_to_depth_x2, conv2d_20], name: "concatenate_1")
        let conv2d_23 = concatenate_1 --> conv2d_22 --> conv2d_23
        let output = conv2d_23
        model = Model(input: input, output: output)
    }
    let success = model.compile(device: device, inflightBuffers: inflightBuffers) {
        name, count, type in ParameterLoaderBundle(name: name,
                                                   count: count,
                                                   prefix: "yolo-",
                                                   suffix: type == .weights ? ".weights" : ".biases",
                                                   ext: "bin")
    }
    
    // end of autogenerated forge net generation code
    super.init(model: model,
               inputWidth: inputWidth, inputHeight: inputHeight,
               blockSize: 32,
               gridHeight: 19, gridWidth: 19,
               boxesPerCell: 5,
               numClasses: 80,
               anchors: yolo_anchors,
               threshold: 0.5)
    
    if success {
      print(model.summary())
    }
  }
}
