
//
//  Begin of autogenerated swift source code
//
//  MobilenetBuilder.swift
//
//  created 2017-10-11 13:12 by keras2metal.py
//
//  Converter wittenn by Pavel Mayer, Tognos GmbH, http://tognos.com/
//  based on YADK and Forge yolo2metal.py
//

import Foundation
//import Forge
import MetalPerformanceShaders

open class MobilenetBuilder : NetworkBuilder {

private(set) public var model: Model
private(set) public var device: MTLDevice
private(set) public var name = "mobilenet"

public required init(device: MTLDevice) {
  self.device = device

let relun6 = MPSCNNNeuronReLUN(device: device, a: 0.0, b: 6.0)
let input_scale = MPSCNNNeuronLinear(device: device, a: 2, b: -1)
let input = Input()
let input_2 = input --> Resize(width: 224, height: 224) --> Activation(input_scale, name: "input_scale")
let conv1 = Convolution(kernel: (3, 3), channels: 32, stride: (2, 2), name: "conv1")
let conv1_relu = Activation(relun6, name: "conv1_relu")
let conv_dw_1 = DepthwiseConvolution(kernel: (3, 3), name: "conv_dw_1")
let conv_dw_1_relu = Activation(relun6, name: "conv_dw_1_relu")
let conv_pw_1 = Convolution(kernel: (1, 1), channels: 64, name: "conv_pw_1")
let conv_pw_1_relu = Activation(relun6, name: "conv_pw_1_relu")
let conv_dw_2 = DepthwiseConvolution(kernel: (3, 3), stride: (2, 2), name: "conv_dw_2")
let conv_dw_2_relu = Activation(relun6, name: "conv_dw_2_relu")
let conv_pw_2 = Convolution(kernel: (1, 1), channels: 128, name: "conv_pw_2")
let conv_pw_2_relu = Activation(relun6, name: "conv_pw_2_relu")
let conv_dw_3 = DepthwiseConvolution(kernel: (3, 3), name: "conv_dw_3")
let conv_dw_3_relu = Activation(relun6, name: "conv_dw_3_relu")
let conv_pw_3 = Convolution(kernel: (1, 1), channels: 128, name: "conv_pw_3")
let conv_pw_3_relu = Activation(relun6, name: "conv_pw_3_relu")
let conv_dw_4 = DepthwiseConvolution(kernel: (3, 3), stride: (2, 2), name: "conv_dw_4")
let conv_dw_4_relu = Activation(relun6, name: "conv_dw_4_relu")
let conv_pw_4 = Convolution(kernel: (1, 1), channels: 256, name: "conv_pw_4")
let conv_pw_4_relu = Activation(relun6, name: "conv_pw_4_relu")
let conv_dw_5 = DepthwiseConvolution(kernel: (3, 3), name: "conv_dw_5")
let conv_dw_5_relu = Activation(relun6, name: "conv_dw_5_relu")
let conv_pw_5 = Convolution(kernel: (1, 1), channels: 256, name: "conv_pw_5")
let conv_pw_5_relu = Activation(relun6, name: "conv_pw_5_relu")
let conv_dw_6 = DepthwiseConvolution(kernel: (3, 3), stride: (2, 2), name: "conv_dw_6")
let conv_dw_6_relu = Activation(relun6, name: "conv_dw_6_relu")
let conv_pw_6 = Convolution(kernel: (1, 1), channels: 512, name: "conv_pw_6")
let conv_pw_6_relu = Activation(relun6, name: "conv_pw_6_relu")
let conv_dw_7 = DepthwiseConvolution(kernel: (3, 3), name: "conv_dw_7")
let conv_dw_7_relu = Activation(relun6, name: "conv_dw_7_relu")
let conv_pw_7 = Convolution(kernel: (1, 1), channels: 512, name: "conv_pw_7")
let conv_pw_7_relu = Activation(relun6, name: "conv_pw_7_relu")
let conv_dw_8 = DepthwiseConvolution(kernel: (3, 3), name: "conv_dw_8")
let conv_dw_8_relu = Activation(relun6, name: "conv_dw_8_relu")
let conv_pw_8 = Convolution(kernel: (1, 1), channels: 512, name: "conv_pw_8")
let conv_pw_8_relu = Activation(relun6, name: "conv_pw_8_relu")
let conv_dw_9 = DepthwiseConvolution(kernel: (3, 3), name: "conv_dw_9")
let conv_dw_9_relu = Activation(relun6, name: "conv_dw_9_relu")
let conv_pw_9 = Convolution(kernel: (1, 1), channels: 512, name: "conv_pw_9")
let conv_pw_9_relu = Activation(relun6, name: "conv_pw_9_relu")
let conv_dw_10 = DepthwiseConvolution(kernel: (3, 3), name: "conv_dw_10")
let conv_dw_10_relu = Activation(relun6, name: "conv_dw_10_relu")
let conv_pw_10 = Convolution(kernel: (1, 1), channels: 512, name: "conv_pw_10")
let conv_pw_10_relu = Activation(relun6, name: "conv_pw_10_relu")
let conv_dw_11 = DepthwiseConvolution(kernel: (3, 3), name: "conv_dw_11")
let conv_dw_11_relu = Activation(relun6, name: "conv_dw_11_relu")
let conv_pw_11 = Convolution(kernel: (1, 1), channels: 512, name: "conv_pw_11")
let conv_pw_11_relu = Activation(relun6, name: "conv_pw_11_relu")
let conv_dw_12 = DepthwiseConvolution(kernel: (3, 3), stride: (2, 2), name: "conv_dw_12")
let conv_dw_12_relu = Activation(relun6, name: "conv_dw_12_relu")
let conv_pw_12 = Convolution(kernel: (1, 1), channels: 1024, name: "conv_pw_12")
let conv_pw_12_relu = Activation(relun6, name: "conv_pw_12_relu")
let conv_dw_13 = DepthwiseConvolution(kernel: (3, 3), name: "conv_dw_13")
let conv_dw_13_relu = Activation(relun6, name: "conv_dw_13_relu")
let conv_pw_13 = Convolution(kernel: (1, 1), channels: 1024, name: "conv_pw_13")
let conv_pw_13_relu = Activation(relun6, name: "conv_pw_13_relu")
let global_average_pooling2d_1 = GlobalAveragePooling(name: "global_average_pooling2d_1", useBias: false)
let conv_preds = Convolution(kernel: (1, 1), channels: 1000, name: "conv_preds")
let act_softmax = Softmax(name: "act_softmax")

do {
let reshape_2 = input_2 --> conv1 --> conv1_relu --> conv_dw_1 --> conv_dw_1_relu --> conv_pw_1
         --> conv_pw_1_relu --> conv_dw_2 --> conv_dw_2_relu --> conv_pw_2 --> conv_pw_2_relu
         --> conv_dw_3 --> conv_dw_3_relu --> conv_pw_3 --> conv_pw_3_relu --> conv_dw_4
         --> conv_dw_4_relu --> conv_pw_4 --> conv_pw_4_relu --> conv_dw_5 --> conv_dw_5_relu
         --> conv_pw_5 --> conv_pw_5_relu --> conv_dw_6 --> conv_dw_6_relu --> conv_pw_6
         --> conv_pw_6_relu --> conv_dw_7 --> conv_dw_7_relu --> conv_pw_7 --> conv_pw_7_relu
         --> conv_dw_8 --> conv_dw_8_relu --> conv_pw_8 --> conv_pw_8_relu --> conv_dw_9
         --> conv_dw_9_relu --> conv_pw_9 --> conv_pw_9_relu --> conv_dw_10 --> conv_dw_10_relu
         --> conv_pw_10 --> conv_pw_10_relu --> conv_dw_11 --> conv_dw_11_relu --> conv_pw_11
         --> conv_pw_11_relu --> conv_dw_12 --> conv_dw_12_relu --> conv_pw_12 --> conv_pw_12_relu
         --> conv_dw_13 --> conv_dw_13_relu --> conv_pw_13 --> conv_pw_13_relu --> global_average_pooling2d_1
         --> conv_preds --> act_softmax
let output = reshape_2
model = Model(input: input, output: output)
}
} // init
public func compile(inflightBuffers: Int) -> Bool {
return model.compile(device: device, inflightBuffers: inflightBuffers) { 
  name, count, type in ParameterLoaderBundle(name: name,
  count: count,
  prefix: "mobilenet-",
  suffix: type == .weights ? ".weights" : ".biases",
  ext: "bin")
}
} // func
} // class

// end of autogenerated forge net generation code
