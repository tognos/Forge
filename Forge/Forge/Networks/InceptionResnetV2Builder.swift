
//
//  Begin of autogenerated swift source code
//
//  InceptionResnetV2Builder.swift
//
//  created 2017-10-05 16:41 by keras2metal.py
//
//  Converter wittenn by Pavel Mayer, Tognos GmbH, http://tognos.com/
//  based on YADK and Forge yolo2metal.py
//

import Foundation
//import Forge
import MetalPerformanceShaders

open class InceptionResnetV2Builder : NetworkBuilder {

private(set) public var model: Model
private(set) public var device: MTLDevice
private(set) public var name = "inception_resnet_v2"

public required init(device: MTLDevice) {
  self.device = device

let relu = MPSCNNNeuronReLU(device: device, a: 0)
let input_scale = MPSCNNNeuronLinear(device: device, a: 2, b: -1)
let input = Input()
let input_2 = input --> Resize(width: 299, height: 299) --> Activation(input_scale, name: "input_scale")
let conv2d_1 = Convolution(kernel: (3, 3), channels: 32, stride: (2, 2), padding: .valid, activation: relu, name: "conv2d_1")
let conv2d_2 = Convolution(kernel: (3, 3), channels: 32, padding: .valid, activation: relu, name: "conv2d_2")
let conv2d_3 = Convolution(kernel: (3, 3), channels: 64, activation: relu, name: "conv2d_3")
let max_pooling2d_1 = MaxPooling(kernel: (3, 3), stride: (2, 2), name: "max_pooling2d_1")
let conv2d_4 = Convolution(kernel: (1, 1), channels: 80, padding: .valid, activation: relu, name: "conv2d_4")
let conv2d_5 = Convolution(kernel: (3, 3), channels: 192, padding: .valid, activation: relu, name: "conv2d_5")
let max_pooling2d_2 = MaxPooling(kernel: (3, 3), stride: (2, 2), name: "max_pooling2d_2")
let conv2d_9 = Convolution(kernel: (1, 1), channels: 64, activation: relu, name: "conv2d_9")
let conv2d_7 = Convolution(kernel: (1, 1), channels: 48, activation: relu, name: "conv2d_7")
let conv2d_10 = Convolution(kernel: (3, 3), channels: 96, activation: relu, name: "conv2d_10")
let average_pooling2d_1 = AveragePooling(kernel: (3, 3), stride: (1, 1), padding: .same, name: "average_pooling2d_1")
let conv2d_6 = Convolution(kernel: (1, 1), channels: 96, activation: relu, name: "conv2d_6")
let conv2d_8 = Convolution(kernel: (5, 5), channels: 64, activation: relu, name: "conv2d_8")
let conv2d_11 = Convolution(kernel: (3, 3), channels: 96, activation: relu, name: "conv2d_11")
let conv2d_12 = Convolution(kernel: (1, 1), channels: 64, activation: relu, name: "conv2d_12")
let conv2d_16 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_16")
let conv2d_14 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_14")
let conv2d_17 = Convolution(kernel: (3, 3), channels: 48, activation: relu, name: "conv2d_17")
let conv2d_13 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_13")
let conv2d_15 = Convolution(kernel: (3, 3), channels: 32, activation: relu, name: "conv2d_15")
let conv2d_18 = Convolution(kernel: (3, 3), channels: 64, activation: relu, name: "conv2d_18")
let block35_1_conv = Convolution(kernel: (1, 1), channels: 320, name: "block35_1_conv")
let block35_1_ac = Activation(relu, name: "block35_1_ac")
let conv2d_22 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_22")
let conv2d_20 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_20")
let conv2d_23 = Convolution(kernel: (3, 3), channels: 48, activation: relu, name: "conv2d_23")
let conv2d_19 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_19")
let conv2d_21 = Convolution(kernel: (3, 3), channels: 32, activation: relu, name: "conv2d_21")
let conv2d_24 = Convolution(kernel: (3, 3), channels: 64, activation: relu, name: "conv2d_24")
let block35_2_conv = Convolution(kernel: (1, 1), channels: 320, name: "block35_2_conv")
let block35_2_ac = Activation(relu, name: "block35_2_ac")
let conv2d_28 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_28")
let conv2d_26 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_26")
let conv2d_29 = Convolution(kernel: (3, 3), channels: 48, activation: relu, name: "conv2d_29")
let conv2d_25 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_25")
let conv2d_27 = Convolution(kernel: (3, 3), channels: 32, activation: relu, name: "conv2d_27")
let conv2d_30 = Convolution(kernel: (3, 3), channels: 64, activation: relu, name: "conv2d_30")
let block35_3_conv = Convolution(kernel: (1, 1), channels: 320, name: "block35_3_conv")
let block35_3_ac = Activation(relu, name: "block35_3_ac")
let conv2d_34 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_34")
let conv2d_32 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_32")
let conv2d_35 = Convolution(kernel: (3, 3), channels: 48, activation: relu, name: "conv2d_35")
let conv2d_31 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_31")
let conv2d_33 = Convolution(kernel: (3, 3), channels: 32, activation: relu, name: "conv2d_33")
let conv2d_36 = Convolution(kernel: (3, 3), channels: 64, activation: relu, name: "conv2d_36")
let block35_4_conv = Convolution(kernel: (1, 1), channels: 320, name: "block35_4_conv")
let block35_4_ac = Activation(relu, name: "block35_4_ac")
let conv2d_40 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_40")
let conv2d_38 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_38")
let conv2d_41 = Convolution(kernel: (3, 3), channels: 48, activation: relu, name: "conv2d_41")
let conv2d_37 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_37")
let conv2d_39 = Convolution(kernel: (3, 3), channels: 32, activation: relu, name: "conv2d_39")
let conv2d_42 = Convolution(kernel: (3, 3), channels: 64, activation: relu, name: "conv2d_42")
let block35_5_conv = Convolution(kernel: (1, 1), channels: 320, name: "block35_5_conv")
let block35_5_ac = Activation(relu, name: "block35_5_ac")
let conv2d_46 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_46")
let conv2d_44 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_44")
let conv2d_47 = Convolution(kernel: (3, 3), channels: 48, activation: relu, name: "conv2d_47")
let conv2d_43 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_43")
let conv2d_45 = Convolution(kernel: (3, 3), channels: 32, activation: relu, name: "conv2d_45")
let conv2d_48 = Convolution(kernel: (3, 3), channels: 64, activation: relu, name: "conv2d_48")
let block35_6_conv = Convolution(kernel: (1, 1), channels: 320, name: "block35_6_conv")
let block35_6_ac = Activation(relu, name: "block35_6_ac")
let conv2d_52 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_52")
let conv2d_50 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_50")
let conv2d_53 = Convolution(kernel: (3, 3), channels: 48, activation: relu, name: "conv2d_53")
let conv2d_49 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_49")
let conv2d_51 = Convolution(kernel: (3, 3), channels: 32, activation: relu, name: "conv2d_51")
let conv2d_54 = Convolution(kernel: (3, 3), channels: 64, activation: relu, name: "conv2d_54")
let block35_7_conv = Convolution(kernel: (1, 1), channels: 320, name: "block35_7_conv")
let block35_7_ac = Activation(relu, name: "block35_7_ac")
let conv2d_58 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_58")
let conv2d_56 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_56")
let conv2d_59 = Convolution(kernel: (3, 3), channels: 48, activation: relu, name: "conv2d_59")
let conv2d_55 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_55")
let conv2d_57 = Convolution(kernel: (3, 3), channels: 32, activation: relu, name: "conv2d_57")
let conv2d_60 = Convolution(kernel: (3, 3), channels: 64, activation: relu, name: "conv2d_60")
let block35_8_conv = Convolution(kernel: (1, 1), channels: 320, name: "block35_8_conv")
let block35_8_ac = Activation(relu, name: "block35_8_ac")
let conv2d_64 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_64")
let conv2d_62 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_62")
let conv2d_65 = Convolution(kernel: (3, 3), channels: 48, activation: relu, name: "conv2d_65")
let conv2d_61 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_61")
let conv2d_63 = Convolution(kernel: (3, 3), channels: 32, activation: relu, name: "conv2d_63")
let conv2d_66 = Convolution(kernel: (3, 3), channels: 64, activation: relu, name: "conv2d_66")
let block35_9_conv = Convolution(kernel: (1, 1), channels: 320, name: "block35_9_conv")
let block35_9_ac = Activation(relu, name: "block35_9_ac")
let conv2d_70 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_70")
let conv2d_68 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_68")
let conv2d_71 = Convolution(kernel: (3, 3), channels: 48, activation: relu, name: "conv2d_71")
let conv2d_67 = Convolution(kernel: (1, 1), channels: 32, activation: relu, name: "conv2d_67")
let conv2d_69 = Convolution(kernel: (3, 3), channels: 32, activation: relu, name: "conv2d_69")
let conv2d_72 = Convolution(kernel: (3, 3), channels: 64, activation: relu, name: "conv2d_72")
let block35_10_conv = Convolution(kernel: (1, 1), channels: 320, name: "block35_10_conv")
let block35_10_ac = Activation(relu, name: "block35_10_ac")
let conv2d_74 = Convolution(kernel: (1, 1), channels: 256, activation: relu, name: "conv2d_74")
let conv2d_75 = Convolution(kernel: (3, 3), channels: 256, activation: relu, name: "conv2d_75")
let conv2d_73 = Convolution(kernel: (3, 3), channels: 384, stride: (2, 2), padding: .valid, activation: relu, name: "conv2d_73")
let conv2d_76 = Convolution(kernel: (3, 3), channels: 384, stride: (2, 2), padding: .valid, activation: relu, name: "conv2d_76")
let max_pooling2d_3 = MaxPooling(kernel: (3, 3), stride: (2, 2), name: "max_pooling2d_3")
let conv2d_78 = Convolution(kernel: (1, 1), channels: 128, activation: relu, name: "conv2d_78")
let conv2d_79 = Convolution(kernel: (7, 1), channels: 160, activation: relu, name: "conv2d_79")
let conv2d_77 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_77")
let conv2d_80 = Convolution(kernel: (1, 7), channels: 192, activation: relu, name: "conv2d_80")
let block17_1_conv = Convolution(kernel: (1, 1), channels: 1088, name: "block17_1_conv")
let block17_1_ac = Activation(relu, name: "block17_1_ac")
let conv2d_82 = Convolution(kernel: (1, 1), channels: 128, activation: relu, name: "conv2d_82")
let conv2d_83 = Convolution(kernel: (7, 1), channels: 160, activation: relu, name: "conv2d_83")
let conv2d_81 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_81")
let conv2d_84 = Convolution(kernel: (1, 7), channels: 192, activation: relu, name: "conv2d_84")
let block17_2_conv = Convolution(kernel: (1, 1), channels: 1088, name: "block17_2_conv")
let block17_2_ac = Activation(relu, name: "block17_2_ac")
let conv2d_86 = Convolution(kernel: (1, 1), channels: 128, activation: relu, name: "conv2d_86")
let conv2d_87 = Convolution(kernel: (7, 1), channels: 160, activation: relu, name: "conv2d_87")
let conv2d_85 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_85")
let conv2d_88 = Convolution(kernel: (1, 7), channels: 192, activation: relu, name: "conv2d_88")
let block17_3_conv = Convolution(kernel: (1, 1), channels: 1088, name: "block17_3_conv")
let block17_3_ac = Activation(relu, name: "block17_3_ac")
let conv2d_90 = Convolution(kernel: (1, 1), channels: 128, activation: relu, name: "conv2d_90")
let conv2d_91 = Convolution(kernel: (7, 1), channels: 160, activation: relu, name: "conv2d_91")
let conv2d_89 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_89")
let conv2d_92 = Convolution(kernel: (1, 7), channels: 192, activation: relu, name: "conv2d_92")
let block17_4_conv = Convolution(kernel: (1, 1), channels: 1088, name: "block17_4_conv")
let block17_4_ac = Activation(relu, name: "block17_4_ac")
let conv2d_94 = Convolution(kernel: (1, 1), channels: 128, activation: relu, name: "conv2d_94")
let conv2d_95 = Convolution(kernel: (7, 1), channels: 160, activation: relu, name: "conv2d_95")
let conv2d_93 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_93")
let conv2d_96 = Convolution(kernel: (1, 7), channels: 192, activation: relu, name: "conv2d_96")
let block17_5_conv = Convolution(kernel: (1, 1), channels: 1088, name: "block17_5_conv")
let block17_5_ac = Activation(relu, name: "block17_5_ac")
let conv2d_98 = Convolution(kernel: (1, 1), channels: 128, activation: relu, name: "conv2d_98")
let conv2d_99 = Convolution(kernel: (7, 1), channels: 160, activation: relu, name: "conv2d_99")
let conv2d_97 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_97")
let conv2d_100 = Convolution(kernel: (1, 7), channels: 192, activation: relu, name: "conv2d_100")
let block17_6_conv = Convolution(kernel: (1, 1), channels: 1088, name: "block17_6_conv")
let block17_6_ac = Activation(relu, name: "block17_6_ac")
let conv2d_102 = Convolution(kernel: (1, 1), channels: 128, activation: relu, name: "conv2d_102")
let conv2d_103 = Convolution(kernel: (7, 1), channels: 160, activation: relu, name: "conv2d_103")
let conv2d_101 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_101")
let conv2d_104 = Convolution(kernel: (1, 7), channels: 192, activation: relu, name: "conv2d_104")
let block17_7_conv = Convolution(kernel: (1, 1), channels: 1088, name: "block17_7_conv")
let block17_7_ac = Activation(relu, name: "block17_7_ac")
let conv2d_106 = Convolution(kernel: (1, 1), channels: 128, activation: relu, name: "conv2d_106")
let conv2d_107 = Convolution(kernel: (7, 1), channels: 160, activation: relu, name: "conv2d_107")
let conv2d_105 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_105")
let conv2d_108 = Convolution(kernel: (1, 7), channels: 192, activation: relu, name: "conv2d_108")
let block17_8_conv = Convolution(kernel: (1, 1), channels: 1088, name: "block17_8_conv")
let block17_8_ac = Activation(relu, name: "block17_8_ac")
let conv2d_110 = Convolution(kernel: (1, 1), channels: 128, activation: relu, name: "conv2d_110")
let conv2d_111 = Convolution(kernel: (7, 1), channels: 160, activation: relu, name: "conv2d_111")
let conv2d_109 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_109")
let conv2d_112 = Convolution(kernel: (1, 7), channels: 192, activation: relu, name: "conv2d_112")
let block17_9_conv = Convolution(kernel: (1, 1), channels: 1088, name: "block17_9_conv")
let block17_9_ac = Activation(relu, name: "block17_9_ac")
let conv2d_114 = Convolution(kernel: (1, 1), channels: 128, activation: relu, name: "conv2d_114")
let conv2d_115 = Convolution(kernel: (7, 1), channels: 160, activation: relu, name: "conv2d_115")
let conv2d_113 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_113")
let conv2d_116 = Convolution(kernel: (1, 7), channels: 192, activation: relu, name: "conv2d_116")
let block17_10_conv = Convolution(kernel: (1, 1), channels: 1088, name: "block17_10_conv")
let block17_10_ac = Activation(relu, name: "block17_10_ac")
let conv2d_118 = Convolution(kernel: (1, 1), channels: 128, activation: relu, name: "conv2d_118")
let conv2d_119 = Convolution(kernel: (7, 1), channels: 160, activation: relu, name: "conv2d_119")
let conv2d_117 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_117")
let conv2d_120 = Convolution(kernel: (1, 7), channels: 192, activation: relu, name: "conv2d_120")
let block17_11_conv = Convolution(kernel: (1, 1), channels: 1088, name: "block17_11_conv")
let block17_11_ac = Activation(relu, name: "block17_11_ac")
let conv2d_122 = Convolution(kernel: (1, 1), channels: 128, activation: relu, name: "conv2d_122")
let conv2d_123 = Convolution(kernel: (7, 1), channels: 160, activation: relu, name: "conv2d_123")
let conv2d_121 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_121")
let conv2d_124 = Convolution(kernel: (1, 7), channels: 192, activation: relu, name: "conv2d_124")
let block17_12_conv = Convolution(kernel: (1, 1), channels: 1088, name: "block17_12_conv")
let block17_12_ac = Activation(relu, name: "block17_12_ac")
let conv2d_126 = Convolution(kernel: (1, 1), channels: 128, activation: relu, name: "conv2d_126")
let conv2d_127 = Convolution(kernel: (7, 1), channels: 160, activation: relu, name: "conv2d_127")
let conv2d_125 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_125")
let conv2d_128 = Convolution(kernel: (1, 7), channels: 192, activation: relu, name: "conv2d_128")
let block17_13_conv = Convolution(kernel: (1, 1), channels: 1088, name: "block17_13_conv")
let block17_13_ac = Activation(relu, name: "block17_13_ac")
let conv2d_130 = Convolution(kernel: (1, 1), channels: 128, activation: relu, name: "conv2d_130")
let conv2d_131 = Convolution(kernel: (7, 1), channels: 160, activation: relu, name: "conv2d_131")
let conv2d_129 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_129")
let conv2d_132 = Convolution(kernel: (1, 7), channels: 192, activation: relu, name: "conv2d_132")
let block17_14_conv = Convolution(kernel: (1, 1), channels: 1088, name: "block17_14_conv")
let block17_14_ac = Activation(relu, name: "block17_14_ac")
let conv2d_134 = Convolution(kernel: (1, 1), channels: 128, activation: relu, name: "conv2d_134")
let conv2d_135 = Convolution(kernel: (7, 1), channels: 160, activation: relu, name: "conv2d_135")
let conv2d_133 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_133")
let conv2d_136 = Convolution(kernel: (1, 7), channels: 192, activation: relu, name: "conv2d_136")
let block17_15_conv = Convolution(kernel: (1, 1), channels: 1088, name: "block17_15_conv")
let block17_15_ac = Activation(relu, name: "block17_15_ac")
let conv2d_138 = Convolution(kernel: (1, 1), channels: 128, activation: relu, name: "conv2d_138")
let conv2d_139 = Convolution(kernel: (7, 1), channels: 160, activation: relu, name: "conv2d_139")
let conv2d_137 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_137")
let conv2d_140 = Convolution(kernel: (1, 7), channels: 192, activation: relu, name: "conv2d_140")
let block17_16_conv = Convolution(kernel: (1, 1), channels: 1088, name: "block17_16_conv")
let block17_16_ac = Activation(relu, name: "block17_16_ac")
let conv2d_142 = Convolution(kernel: (1, 1), channels: 128, activation: relu, name: "conv2d_142")
let conv2d_143 = Convolution(kernel: (7, 1), channels: 160, activation: relu, name: "conv2d_143")
let conv2d_141 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_141")
let conv2d_144 = Convolution(kernel: (1, 7), channels: 192, activation: relu, name: "conv2d_144")
let block17_17_conv = Convolution(kernel: (1, 1), channels: 1088, name: "block17_17_conv")
let block17_17_ac = Activation(relu, name: "block17_17_ac")
let conv2d_146 = Convolution(kernel: (1, 1), channels: 128, activation: relu, name: "conv2d_146")
let conv2d_147 = Convolution(kernel: (7, 1), channels: 160, activation: relu, name: "conv2d_147")
let conv2d_145 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_145")
let conv2d_148 = Convolution(kernel: (1, 7), channels: 192, activation: relu, name: "conv2d_148")
let block17_18_conv = Convolution(kernel: (1, 1), channels: 1088, name: "block17_18_conv")
let block17_18_ac = Activation(relu, name: "block17_18_ac")
let conv2d_150 = Convolution(kernel: (1, 1), channels: 128, activation: relu, name: "conv2d_150")
let conv2d_151 = Convolution(kernel: (7, 1), channels: 160, activation: relu, name: "conv2d_151")
let conv2d_149 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_149")
let conv2d_152 = Convolution(kernel: (1, 7), channels: 192, activation: relu, name: "conv2d_152")
let block17_19_conv = Convolution(kernel: (1, 1), channels: 1088, name: "block17_19_conv")
let block17_19_ac = Activation(relu, name: "block17_19_ac")
let conv2d_154 = Convolution(kernel: (1, 1), channels: 128, activation: relu, name: "conv2d_154")
let conv2d_155 = Convolution(kernel: (7, 1), channels: 160, activation: relu, name: "conv2d_155")
let conv2d_153 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_153")
let conv2d_156 = Convolution(kernel: (1, 7), channels: 192, activation: relu, name: "conv2d_156")
let block17_20_conv = Convolution(kernel: (1, 1), channels: 1088, name: "block17_20_conv")
let block17_20_ac = Activation(relu, name: "block17_20_ac")
let conv2d_161 = Convolution(kernel: (1, 1), channels: 256, activation: relu, name: "conv2d_161")
let conv2d_157 = Convolution(kernel: (1, 1), channels: 256, activation: relu, name: "conv2d_157")
let conv2d_159 = Convolution(kernel: (1, 1), channels: 256, activation: relu, name: "conv2d_159")
let conv2d_162 = Convolution(kernel: (3, 3), channels: 288, activation: relu, name: "conv2d_162")
let conv2d_158 = Convolution(kernel: (3, 3), channels: 384, stride: (2, 2), padding: .valid, activation: relu, name: "conv2d_158")
let conv2d_160 = Convolution(kernel: (3, 3), channels: 288, stride: (2, 2), padding: .valid, activation: relu, name: "conv2d_160")
let conv2d_163 = Convolution(kernel: (3, 3), channels: 320, stride: (2, 2), padding: .valid, activation: relu, name: "conv2d_163")
let max_pooling2d_4 = MaxPooling(kernel: (3, 3), stride: (2, 2), name: "max_pooling2d_4")
let conv2d_165 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_165")
let conv2d_166 = Convolution(kernel: (3, 1), channels: 224, activation: relu, name: "conv2d_166")
let conv2d_164 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_164")
let conv2d_167 = Convolution(kernel: (1, 3), channels: 256, activation: relu, name: "conv2d_167")
let block8_1_conv = Convolution(kernel: (1, 1), channels: 2080, name: "block8_1_conv")
let block8_1_ac = Activation(relu, name: "block8_1_ac")
let conv2d_169 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_169")
let conv2d_170 = Convolution(kernel: (3, 1), channels: 224, activation: relu, name: "conv2d_170")
let conv2d_168 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_168")
let conv2d_171 = Convolution(kernel: (1, 3), channels: 256, activation: relu, name: "conv2d_171")
let block8_2_conv = Convolution(kernel: (1, 1), channels: 2080, name: "block8_2_conv")
let block8_2_ac = Activation(relu, name: "block8_2_ac")
let conv2d_173 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_173")
let conv2d_174 = Convolution(kernel: (3, 1), channels: 224, activation: relu, name: "conv2d_174")
let conv2d_172 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_172")
let conv2d_175 = Convolution(kernel: (1, 3), channels: 256, activation: relu, name: "conv2d_175")
let block8_3_conv = Convolution(kernel: (1, 1), channels: 2080, name: "block8_3_conv")
let block8_3_ac = Activation(relu, name: "block8_3_ac")
let conv2d_177 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_177")
let conv2d_178 = Convolution(kernel: (3, 1), channels: 224, activation: relu, name: "conv2d_178")
let conv2d_176 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_176")
let conv2d_179 = Convolution(kernel: (1, 3), channels: 256, activation: relu, name: "conv2d_179")
let block8_4_conv = Convolution(kernel: (1, 1), channels: 2080, name: "block8_4_conv")
let block8_4_ac = Activation(relu, name: "block8_4_ac")
let conv2d_181 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_181")
let conv2d_182 = Convolution(kernel: (3, 1), channels: 224, activation: relu, name: "conv2d_182")
let conv2d_180 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_180")
let conv2d_183 = Convolution(kernel: (1, 3), channels: 256, activation: relu, name: "conv2d_183")
let block8_5_conv = Convolution(kernel: (1, 1), channels: 2080, name: "block8_5_conv")
let block8_5_ac = Activation(relu, name: "block8_5_ac")
let conv2d_185 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_185")
let conv2d_186 = Convolution(kernel: (3, 1), channels: 224, activation: relu, name: "conv2d_186")
let conv2d_184 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_184")
let conv2d_187 = Convolution(kernel: (1, 3), channels: 256, activation: relu, name: "conv2d_187")
let block8_6_conv = Convolution(kernel: (1, 1), channels: 2080, name: "block8_6_conv")
let block8_6_ac = Activation(relu, name: "block8_6_ac")
let conv2d_189 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_189")
let conv2d_190 = Convolution(kernel: (3, 1), channels: 224, activation: relu, name: "conv2d_190")
let conv2d_188 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_188")
let conv2d_191 = Convolution(kernel: (1, 3), channels: 256, activation: relu, name: "conv2d_191")
let block8_7_conv = Convolution(kernel: (1, 1), channels: 2080, name: "block8_7_conv")
let block8_7_ac = Activation(relu, name: "block8_7_ac")
let conv2d_193 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_193")
let conv2d_194 = Convolution(kernel: (3, 1), channels: 224, activation: relu, name: "conv2d_194")
let conv2d_192 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_192")
let conv2d_195 = Convolution(kernel: (1, 3), channels: 256, activation: relu, name: "conv2d_195")
let block8_8_conv = Convolution(kernel: (1, 1), channels: 2080, name: "block8_8_conv")
let block8_8_ac = Activation(relu, name: "block8_8_ac")
let conv2d_197 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_197")
let conv2d_198 = Convolution(kernel: (3, 1), channels: 224, activation: relu, name: "conv2d_198")
let conv2d_196 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_196")
let conv2d_199 = Convolution(kernel: (1, 3), channels: 256, activation: relu, name: "conv2d_199")
let block8_9_conv = Convolution(kernel: (1, 1), channels: 2080, name: "block8_9_conv")
let block8_9_ac = Activation(relu, name: "block8_9_ac")
let conv2d_201 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_201")
let conv2d_202 = Convolution(kernel: (3, 1), channels: 224, activation: relu, name: "conv2d_202")
let conv2d_200 = Convolution(kernel: (1, 1), channels: 192, activation: relu, name: "conv2d_200")
let conv2d_203 = Convolution(kernel: (1, 3), channels: 256, activation: relu, name: "conv2d_203")
let block8_10_conv = Convolution(kernel: (1, 1), channels: 2080, name: "block8_10_conv")
let conv_7b = Convolution(kernel: (1, 1), channels: 1536, activation: relu, name: "conv_7b")
let avg_pool = GlobalAveragePooling(name: "avg_pool", useBias: false)
let predictions = Dense(neurons: 1000, name: "predictions")

do {
let max_pooling2d_2 = input_2 --> conv2d_1 --> conv2d_2 --> conv2d_3 --> max_pooling2d_1 --> conv2d_4
         --> conv2d_5 --> max_pooling2d_2
let conv2d_11 = max_pooling2d_2 --> conv2d_9 --> conv2d_10 --> conv2d_11
let conv2d_8 = max_pooling2d_2 --> conv2d_7 --> conv2d_8
let conv2d_6 = max_pooling2d_2 --> conv2d_6
let conv2d_12 = max_pooling2d_2 --> average_pooling2d_1 --> conv2d_12
let mixed_5b = Concatenate([conv2d_6, conv2d_8, conv2d_11, conv2d_12], name: "mixed_5b")
let conv2d_13 = mixed_5b --> conv2d_13
let conv2d_18 = mixed_5b --> conv2d_16 --> conv2d_17 --> conv2d_18
let conv2d_15 = mixed_5b --> conv2d_14 --> conv2d_15
let block35_1_mixed = Concatenate([conv2d_13, conv2d_15, conv2d_18], name: "block35_1_mixed")
let block35_1_conv = block35_1_mixed --> block35_1_conv
let block35_1 = Collect([mixed_5b, block35_1_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.17, b: 0), name: "scale_input1_block35_1")], name: "for_block35_1") --> Add(name: "block35_1")
let block35_1_ac = block35_1 --> block35_1_ac
let conv2d_21 = block35_1_ac --> conv2d_20 --> conv2d_21
let conv2d_19 = block35_1_ac --> conv2d_19
let conv2d_24 = block35_1_ac --> conv2d_22 --> conv2d_23 --> conv2d_24
let block35_2_mixed = Concatenate([conv2d_19, conv2d_21, conv2d_24], name: "block35_2_mixed")
let block35_2_conv = block35_2_mixed --> block35_2_conv
let block35_2 = Collect([block35_1_ac, block35_2_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.17, b: 0), name: "scale_input1_block35_2")], name: "for_block35_2") --> Add(name: "block35_2")
let block35_2_ac = block35_2 --> block35_2_ac
let conv2d_27 = block35_2_ac --> conv2d_26 --> conv2d_27
let conv2d_25 = block35_2_ac --> conv2d_25
let conv2d_30 = block35_2_ac --> conv2d_28 --> conv2d_29 --> conv2d_30
let block35_3_mixed = Concatenate([conv2d_25, conv2d_27, conv2d_30], name: "block35_3_mixed")
let block35_3_conv = block35_3_mixed --> block35_3_conv
let block35_3 = Collect([block35_2_ac, block35_3_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.17, b: 0), name: "scale_input1_block35_3")], name: "for_block35_3") --> Add(name: "block35_3")
let block35_3_ac = block35_3 --> block35_3_ac
let conv2d_33 = block35_3_ac --> conv2d_32 --> conv2d_33
let conv2d_36 = block35_3_ac --> conv2d_34 --> conv2d_35 --> conv2d_36
let conv2d_31 = block35_3_ac --> conv2d_31
let block35_4_mixed = Concatenate([conv2d_31, conv2d_33, conv2d_36], name: "block35_4_mixed")
let block35_4_conv = block35_4_mixed --> block35_4_conv
let block35_4 = Collect([block35_3_ac, block35_4_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.17, b: 0), name: "scale_input1_block35_4")], name: "for_block35_4") --> Add(name: "block35_4")
let block35_4_ac = block35_4 --> block35_4_ac
let conv2d_42 = block35_4_ac --> conv2d_40 --> conv2d_41 --> conv2d_42
let conv2d_37 = block35_4_ac --> conv2d_37
let conv2d_39 = block35_4_ac --> conv2d_38 --> conv2d_39
let block35_5_mixed = Concatenate([conv2d_37, conv2d_39, conv2d_42], name: "block35_5_mixed")
let block35_5_conv = block35_5_mixed --> block35_5_conv
let block35_5 = Collect([block35_4_ac, block35_5_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.17, b: 0), name: "scale_input1_block35_5")], name: "for_block35_5") --> Add(name: "block35_5")
let block35_5_ac = block35_5 --> block35_5_ac
let conv2d_43 = block35_5_ac --> conv2d_43
let conv2d_48 = block35_5_ac --> conv2d_46 --> conv2d_47 --> conv2d_48
let conv2d_45 = block35_5_ac --> conv2d_44 --> conv2d_45
let block35_6_mixed = Concatenate([conv2d_43, conv2d_45, conv2d_48], name: "block35_6_mixed")
let block35_6_conv = block35_6_mixed --> block35_6_conv
let block35_6 = Collect([block35_5_ac, block35_6_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.17, b: 0), name: "scale_input1_block35_6")], name: "for_block35_6") --> Add(name: "block35_6")
let block35_6_ac = block35_6 --> block35_6_ac
let conv2d_54 = block35_6_ac --> conv2d_52 --> conv2d_53 --> conv2d_54
let conv2d_49 = block35_6_ac --> conv2d_49
let conv2d_51 = block35_6_ac --> conv2d_50 --> conv2d_51
let block35_7_mixed = Concatenate([conv2d_49, conv2d_51, conv2d_54], name: "block35_7_mixed")
let block35_7_conv = block35_7_mixed --> block35_7_conv
let block35_7 = Collect([block35_6_ac, block35_7_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.17, b: 0), name: "scale_input1_block35_7")], name: "for_block35_7") --> Add(name: "block35_7")
let block35_7_ac = block35_7 --> block35_7_ac
let conv2d_60 = block35_7_ac --> conv2d_58 --> conv2d_59 --> conv2d_60
let conv2d_55 = block35_7_ac --> conv2d_55
let conv2d_57 = block35_7_ac --> conv2d_56 --> conv2d_57
let block35_8_mixed = Concatenate([conv2d_55, conv2d_57, conv2d_60], name: "block35_8_mixed")
let block35_8_conv = block35_8_mixed --> block35_8_conv
let block35_8 = Collect([block35_7_ac, block35_8_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.17, b: 0), name: "scale_input1_block35_8")], name: "for_block35_8") --> Add(name: "block35_8")
let block35_8_ac = block35_8 --> block35_8_ac
let conv2d_63 = block35_8_ac --> conv2d_62 --> conv2d_63
let conv2d_66 = block35_8_ac --> conv2d_64 --> conv2d_65 --> conv2d_66
let conv2d_61 = block35_8_ac --> conv2d_61
let block35_9_mixed = Concatenate([conv2d_61, conv2d_63, conv2d_66], name: "block35_9_mixed")
let block35_9_conv = block35_9_mixed --> block35_9_conv
let block35_9 = Collect([block35_8_ac, block35_9_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.17, b: 0), name: "scale_input1_block35_9")], name: "for_block35_9") --> Add(name: "block35_9")
let block35_9_ac = block35_9 --> block35_9_ac
let conv2d_69 = block35_9_ac --> conv2d_68 --> conv2d_69
let conv2d_67 = block35_9_ac --> conv2d_67
let conv2d_72 = block35_9_ac --> conv2d_70 --> conv2d_71 --> conv2d_72
let block35_10_mixed = Concatenate([conv2d_67, conv2d_69, conv2d_72], name: "block35_10_mixed")
let block35_10_conv = block35_10_mixed --> block35_10_conv
let block35_10 = Collect([block35_9_ac, block35_10_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.17, b: 0), name: "scale_input1_block35_10")], name: "for_block35_10") --> Add(name: "block35_10")
let block35_10_ac = block35_10 --> block35_10_ac
let conv2d_73 = block35_10_ac --> conv2d_73
let max_pooling2d_3 = block35_10_ac --> max_pooling2d_3
let conv2d_76 = block35_10_ac --> conv2d_74 --> conv2d_75 --> conv2d_76
let mixed_6a = Concatenate([conv2d_73, conv2d_76, max_pooling2d_3], name: "mixed_6a")
let conv2d_80 = mixed_6a --> conv2d_78 --> conv2d_79 --> conv2d_80
let conv2d_77 = mixed_6a --> conv2d_77
let block17_1_mixed = Concatenate([conv2d_77, conv2d_80], name: "block17_1_mixed")
let block17_1_conv = block17_1_mixed --> block17_1_conv
let block17_1 = Collect([mixed_6a, block17_1_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.1, b: 0), name: "scale_input1_block17_1")], name: "for_block17_1") --> Add(name: "block17_1")
let block17_1_ac = block17_1 --> block17_1_ac
let conv2d_84 = block17_1_ac --> conv2d_82 --> conv2d_83 --> conv2d_84
let conv2d_81 = block17_1_ac --> conv2d_81
let block17_2_mixed = Concatenate([conv2d_81, conv2d_84], name: "block17_2_mixed")
let block17_2_conv = block17_2_mixed --> block17_2_conv
let block17_2 = Collect([block17_1_ac, block17_2_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.1, b: 0), name: "scale_input1_block17_2")], name: "for_block17_2") --> Add(name: "block17_2")
let block17_2_ac = block17_2 --> block17_2_ac
let conv2d_85 = block17_2_ac --> conv2d_85
let conv2d_88 = block17_2_ac --> conv2d_86 --> conv2d_87 --> conv2d_88
let block17_3_mixed = Concatenate([conv2d_85, conv2d_88], name: "block17_3_mixed")
let block17_3_conv = block17_3_mixed --> block17_3_conv
let block17_3 = Collect([block17_2_ac, block17_3_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.1, b: 0), name: "scale_input1_block17_3")], name: "for_block17_3") --> Add(name: "block17_3")
let block17_3_ac = block17_3 --> block17_3_ac
let conv2d_89 = block17_3_ac --> conv2d_89
let conv2d_92 = block17_3_ac --> conv2d_90 --> conv2d_91 --> conv2d_92
let block17_4_mixed = Concatenate([conv2d_89, conv2d_92], name: "block17_4_mixed")
let block17_4_conv = block17_4_mixed --> block17_4_conv
let block17_4 = Collect([block17_3_ac, block17_4_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.1, b: 0), name: "scale_input1_block17_4")], name: "for_block17_4") --> Add(name: "block17_4")
let block17_4_ac = block17_4 --> block17_4_ac
let conv2d_96 = block17_4_ac --> conv2d_94 --> conv2d_95 --> conv2d_96
let conv2d_93 = block17_4_ac --> conv2d_93
let block17_5_mixed = Concatenate([conv2d_93, conv2d_96], name: "block17_5_mixed")
let block17_5_conv = block17_5_mixed --> block17_5_conv
let block17_5 = Collect([block17_4_ac, block17_5_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.1, b: 0), name: "scale_input1_block17_5")], name: "for_block17_5") --> Add(name: "block17_5")
let block17_5_ac = block17_5 --> block17_5_ac
let conv2d_97 = block17_5_ac --> conv2d_97
let conv2d_100 = block17_5_ac --> conv2d_98 --> conv2d_99 --> conv2d_100
let block17_6_mixed = Concatenate([conv2d_97, conv2d_100], name: "block17_6_mixed")
let block17_6_conv = block17_6_mixed --> block17_6_conv
let block17_6 = Collect([block17_5_ac, block17_6_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.1, b: 0), name: "scale_input1_block17_6")], name: "for_block17_6") --> Add(name: "block17_6")
let block17_6_ac = block17_6 --> block17_6_ac
let conv2d_101 = block17_6_ac --> conv2d_101
let conv2d_104 = block17_6_ac --> conv2d_102 --> conv2d_103 --> conv2d_104
let block17_7_mixed = Concatenate([conv2d_101, conv2d_104], name: "block17_7_mixed")
let block17_7_conv = block17_7_mixed --> block17_7_conv
let block17_7 = Collect([block17_6_ac, block17_7_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.1, b: 0), name: "scale_input1_block17_7")], name: "for_block17_7") --> Add(name: "block17_7")
let block17_7_ac = block17_7 --> block17_7_ac
let conv2d_105 = block17_7_ac --> conv2d_105
let conv2d_108 = block17_7_ac --> conv2d_106 --> conv2d_107 --> conv2d_108
let block17_8_mixed = Concatenate([conv2d_105, conv2d_108], name: "block17_8_mixed")
let block17_8_conv = block17_8_mixed --> block17_8_conv
let block17_8 = Collect([block17_7_ac, block17_8_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.1, b: 0), name: "scale_input1_block17_8")], name: "for_block17_8") --> Add(name: "block17_8")
let block17_8_ac = block17_8 --> block17_8_ac
let conv2d_109 = block17_8_ac --> conv2d_109
let conv2d_112 = block17_8_ac --> conv2d_110 --> conv2d_111 --> conv2d_112
let block17_9_mixed = Concatenate([conv2d_109, conv2d_112], name: "block17_9_mixed")
let block17_9_conv = block17_9_mixed --> block17_9_conv
let block17_9 = Collect([block17_8_ac, block17_9_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.1, b: 0), name: "scale_input1_block17_9")], name: "for_block17_9") --> Add(name: "block17_9")
let block17_9_ac = block17_9 --> block17_9_ac
let conv2d_113 = block17_9_ac --> conv2d_113
let conv2d_116 = block17_9_ac --> conv2d_114 --> conv2d_115 --> conv2d_116
let block17_10_mixed = Concatenate([conv2d_113, conv2d_116], name: "block17_10_mixed")
let block17_10_conv = block17_10_mixed --> block17_10_conv
let block17_10 = Collect([block17_9_ac, block17_10_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.1, b: 0), name: "scale_input1_block17_10")], name: "for_block17_10") --> Add(name: "block17_10")
let block17_10_ac = block17_10 --> block17_10_ac
let conv2d_120 = block17_10_ac --> conv2d_118 --> conv2d_119 --> conv2d_120
let conv2d_117 = block17_10_ac --> conv2d_117
let block17_11_mixed = Concatenate([conv2d_117, conv2d_120], name: "block17_11_mixed")
let block17_11_conv = block17_11_mixed --> block17_11_conv
let block17_11 = Collect([block17_10_ac, block17_11_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.1, b: 0), name: "scale_input1_block17_11")], name: "for_block17_11") --> Add(name: "block17_11")
let block17_11_ac = block17_11 --> block17_11_ac
let conv2d_121 = block17_11_ac --> conv2d_121
let conv2d_124 = block17_11_ac --> conv2d_122 --> conv2d_123 --> conv2d_124
let block17_12_mixed = Concatenate([conv2d_121, conv2d_124], name: "block17_12_mixed")
let block17_12_conv = block17_12_mixed --> block17_12_conv
let block17_12 = Collect([block17_11_ac, block17_12_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.1, b: 0), name: "scale_input1_block17_12")], name: "for_block17_12") --> Add(name: "block17_12")
let block17_12_ac = block17_12 --> block17_12_ac
let conv2d_128 = block17_12_ac --> conv2d_126 --> conv2d_127 --> conv2d_128
let conv2d_125 = block17_12_ac --> conv2d_125
let block17_13_mixed = Concatenate([conv2d_125, conv2d_128], name: "block17_13_mixed")
let block17_13_conv = block17_13_mixed --> block17_13_conv
let block17_13 = Collect([block17_12_ac, block17_13_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.1, b: 0), name: "scale_input1_block17_13")], name: "for_block17_13") --> Add(name: "block17_13")
let block17_13_ac = block17_13 --> block17_13_ac
let conv2d_132 = block17_13_ac --> conv2d_130 --> conv2d_131 --> conv2d_132
let conv2d_129 = block17_13_ac --> conv2d_129
let block17_14_mixed = Concatenate([conv2d_129, conv2d_132], name: "block17_14_mixed")
let block17_14_conv = block17_14_mixed --> block17_14_conv
let block17_14 = Collect([block17_13_ac, block17_14_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.1, b: 0), name: "scale_input1_block17_14")], name: "for_block17_14") --> Add(name: "block17_14")
let block17_14_ac = block17_14 --> block17_14_ac
let conv2d_136 = block17_14_ac --> conv2d_134 --> conv2d_135 --> conv2d_136
let conv2d_133 = block17_14_ac --> conv2d_133
let block17_15_mixed = Concatenate([conv2d_133, conv2d_136], name: "block17_15_mixed")
let block17_15_conv = block17_15_mixed --> block17_15_conv
let block17_15 = Collect([block17_14_ac, block17_15_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.1, b: 0), name: "scale_input1_block17_15")], name: "for_block17_15") --> Add(name: "block17_15")
let block17_15_ac = block17_15 --> block17_15_ac
let conv2d_140 = block17_15_ac --> conv2d_138 --> conv2d_139 --> conv2d_140
let conv2d_137 = block17_15_ac --> conv2d_137
let block17_16_mixed = Concatenate([conv2d_137, conv2d_140], name: "block17_16_mixed")
let block17_16_conv = block17_16_mixed --> block17_16_conv
let block17_16 = Collect([block17_15_ac, block17_16_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.1, b: 0), name: "scale_input1_block17_16")], name: "for_block17_16") --> Add(name: "block17_16")
let block17_16_ac = block17_16 --> block17_16_ac
let conv2d_141 = block17_16_ac --> conv2d_141
let conv2d_144 = block17_16_ac --> conv2d_142 --> conv2d_143 --> conv2d_144
let block17_17_mixed = Concatenate([conv2d_141, conv2d_144], name: "block17_17_mixed")
let block17_17_conv = block17_17_mixed --> block17_17_conv
let block17_17 = Collect([block17_16_ac, block17_17_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.1, b: 0), name: "scale_input1_block17_17")], name: "for_block17_17") --> Add(name: "block17_17")
let block17_17_ac = block17_17 --> block17_17_ac
let conv2d_145 = block17_17_ac --> conv2d_145
let conv2d_148 = block17_17_ac --> conv2d_146 --> conv2d_147 --> conv2d_148
let block17_18_mixed = Concatenate([conv2d_145, conv2d_148], name: "block17_18_mixed")
let block17_18_conv = block17_18_mixed --> block17_18_conv
let block17_18 = Collect([block17_17_ac, block17_18_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.1, b: 0), name: "scale_input1_block17_18")], name: "for_block17_18") --> Add(name: "block17_18")
let block17_18_ac = block17_18 --> block17_18_ac
let conv2d_152 = block17_18_ac --> conv2d_150 --> conv2d_151 --> conv2d_152
let conv2d_149 = block17_18_ac --> conv2d_149
let block17_19_mixed = Concatenate([conv2d_149, conv2d_152], name: "block17_19_mixed")
let block17_19_conv = block17_19_mixed --> block17_19_conv
let block17_19 = Collect([block17_18_ac, block17_19_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.1, b: 0), name: "scale_input1_block17_19")], name: "for_block17_19") --> Add(name: "block17_19")
let block17_19_ac = block17_19 --> block17_19_ac
let conv2d_156 = block17_19_ac --> conv2d_154 --> conv2d_155 --> conv2d_156
let conv2d_153 = block17_19_ac --> conv2d_153
let block17_20_mixed = Concatenate([conv2d_153, conv2d_156], name: "block17_20_mixed")
let block17_20_conv = block17_20_mixed --> block17_20_conv
let block17_20 = Collect([block17_19_ac, block17_20_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.1, b: 0), name: "scale_input1_block17_20")], name: "for_block17_20") --> Add(name: "block17_20")
let block17_20_ac = block17_20 --> block17_20_ac
let conv2d_160 = block17_20_ac --> conv2d_159 --> conv2d_160
let conv2d_163 = block17_20_ac --> conv2d_161 --> conv2d_162 --> conv2d_163
let conv2d_158 = block17_20_ac --> conv2d_157 --> conv2d_158
let max_pooling2d_4 = block17_20_ac --> max_pooling2d_4
let mixed_7a = Concatenate([conv2d_158, conv2d_160, conv2d_163, max_pooling2d_4], name: "mixed_7a")
let conv2d_167 = mixed_7a --> conv2d_165 --> conv2d_166 --> conv2d_167
let conv2d_164 = mixed_7a --> conv2d_164
let block8_1_mixed = Concatenate([conv2d_164, conv2d_167], name: "block8_1_mixed")
let block8_1_conv = block8_1_mixed --> block8_1_conv
let block8_1 = Collect([mixed_7a, block8_1_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.2, b: 0), name: "scale_input1_block8_1")], name: "for_block8_1") --> Add(name: "block8_1")
let block8_1_ac = block8_1 --> block8_1_ac
let conv2d_171 = block8_1_ac --> conv2d_169 --> conv2d_170 --> conv2d_171
let conv2d_168 = block8_1_ac --> conv2d_168
let block8_2_mixed = Concatenate([conv2d_168, conv2d_171], name: "block8_2_mixed")
let block8_2_conv = block8_2_mixed --> block8_2_conv
let block8_2 = Collect([block8_1_ac, block8_2_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.2, b: 0), name: "scale_input1_block8_2")], name: "for_block8_2") --> Add(name: "block8_2")
let block8_2_ac = block8_2 --> block8_2_ac
let conv2d_172 = block8_2_ac --> conv2d_172
let conv2d_175 = block8_2_ac --> conv2d_173 --> conv2d_174 --> conv2d_175
let block8_3_mixed = Concatenate([conv2d_172, conv2d_175], name: "block8_3_mixed")
let block8_3_conv = block8_3_mixed --> block8_3_conv
let block8_3 = Collect([block8_2_ac, block8_3_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.2, b: 0), name: "scale_input1_block8_3")], name: "for_block8_3") --> Add(name: "block8_3")
let block8_3_ac = block8_3 --> block8_3_ac
let conv2d_179 = block8_3_ac --> conv2d_177 --> conv2d_178 --> conv2d_179
let conv2d_176 = block8_3_ac --> conv2d_176
let block8_4_mixed = Concatenate([conv2d_176, conv2d_179], name: "block8_4_mixed")
let block8_4_conv = block8_4_mixed --> block8_4_conv
let block8_4 = Collect([block8_3_ac, block8_4_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.2, b: 0), name: "scale_input1_block8_4")], name: "for_block8_4") --> Add(name: "block8_4")
let block8_4_ac = block8_4 --> block8_4_ac
let conv2d_180 = block8_4_ac --> conv2d_180
let conv2d_183 = block8_4_ac --> conv2d_181 --> conv2d_182 --> conv2d_183
let block8_5_mixed = Concatenate([conv2d_180, conv2d_183], name: "block8_5_mixed")
let block8_5_conv = block8_5_mixed --> block8_5_conv
let block8_5 = Collect([block8_4_ac, block8_5_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.2, b: 0), name: "scale_input1_block8_5")], name: "for_block8_5") --> Add(name: "block8_5")
let block8_5_ac = block8_5 --> block8_5_ac
let conv2d_187 = block8_5_ac --> conv2d_185 --> conv2d_186 --> conv2d_187
let conv2d_184 = block8_5_ac --> conv2d_184
let block8_6_mixed = Concatenate([conv2d_184, conv2d_187], name: "block8_6_mixed")
let block8_6_conv = block8_6_mixed --> block8_6_conv
let block8_6 = Collect([block8_5_ac, block8_6_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.2, b: 0), name: "scale_input1_block8_6")], name: "for_block8_6") --> Add(name: "block8_6")
let block8_6_ac = block8_6 --> block8_6_ac
let conv2d_191 = block8_6_ac --> conv2d_189 --> conv2d_190 --> conv2d_191
let conv2d_188 = block8_6_ac --> conv2d_188
let block8_7_mixed = Concatenate([conv2d_188, conv2d_191], name: "block8_7_mixed")
let block8_7_conv = block8_7_mixed --> block8_7_conv
let block8_7 = Collect([block8_6_ac, block8_7_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.2, b: 0), name: "scale_input1_block8_7")], name: "for_block8_7") --> Add(name: "block8_7")
let block8_7_ac = block8_7 --> block8_7_ac
let conv2d_192 = block8_7_ac --> conv2d_192
let conv2d_195 = block8_7_ac --> conv2d_193 --> conv2d_194 --> conv2d_195
let block8_8_mixed = Concatenate([conv2d_192, conv2d_195], name: "block8_8_mixed")
let block8_8_conv = block8_8_mixed --> block8_8_conv
let block8_8 = Collect([block8_7_ac, block8_8_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.2, b: 0), name: "scale_input1_block8_8")], name: "for_block8_8") --> Add(name: "block8_8")
let block8_8_ac = block8_8 --> block8_8_ac
let conv2d_199 = block8_8_ac --> conv2d_197 --> conv2d_198 --> conv2d_199
let conv2d_196 = block8_8_ac --> conv2d_196
let block8_9_mixed = Concatenate([conv2d_196, conv2d_199], name: "block8_9_mixed")
let block8_9_conv = block8_9_mixed --> block8_9_conv
let block8_9 = Collect([block8_8_ac, block8_9_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 0.2, b: 0), name: "scale_input1_block8_9")], name: "for_block8_9") --> Add(name: "block8_9")
let block8_9_ac = block8_9 --> block8_9_ac
let conv2d_203 = block8_9_ac --> conv2d_201 --> conv2d_202 --> conv2d_203
let conv2d_200 = block8_9_ac --> conv2d_200
let block8_10_mixed = Concatenate([conv2d_200, conv2d_203], name: "block8_10_mixed")
let block8_10_conv = block8_10_mixed --> block8_10_conv
let block8_10 = Collect([block8_9_ac, block8_10_conv --> Activation(MPSCNNNeuronLinear(device: device, a: 1.0, b: 0), name: "scale_input1_block8_10")], name: "for_block8_10") --> Add(name: "block8_10")
let predictions = block8_10 --> conv_7b --> avg_pool --> predictions
let output = predictions --> Softmax()
model = Model(input: input, output: output)
}
} // init
public func compile(inflightBuffers: Int) -> Bool {
return model.compile(device: device, inflightBuffers: inflightBuffers) { 
  name, count, type in ParameterLoaderBundle(name: name,
  count: count,
  prefix: "inception_resnet_v2-",
  suffix: type == .weights ? ".weights" : ".biases",
  ext: "bin")
}
} // func
} // class

// end of autogenerated forge net generation code
