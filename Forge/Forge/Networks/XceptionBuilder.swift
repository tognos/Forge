
//
//  Begin of autogenerated swift source code
//
//  XceptionBuilder.swift
//
//  created 2017-10-11 19:43 by keras2metal.py
//
//  Converter wittenn by Pavel Mayer, Tognos GmbH, http://tognos.com/
//  based on YADK and Forge yolo2metal.py
//

import Foundation
//import Forge
import MetalPerformanceShaders

open class XceptionBuilder : NetworkBuilder {

private(set) public var model: Model
private(set) public var device: MTLDevice
private(set) public var name = "xception"

public required init(device: MTLDevice) {
  self.device = device

let relu = MPSCNNNeuronReLU(device: device, a: 0)
let input_scale = MPSCNNNeuronLinear(device: device, a: 2, b: -1)
let input = Input()
let input_2 = input --> Resize(width: 299, height: 299) --> Activation(input_scale, name: "input_scale")
let block1_conv1 = Convolution(kernel: (3, 3), channels: 32, stride: (2, 2), padding: .valid, activation: relu, name: "block1_conv1")
let block1_conv2 = Convolution(kernel: (3, 3), channels: 64, padding: .valid, activation: relu, name: "block1_conv2")
let block2_sepconv1_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block2_sepconv1_sep")
let block2_sepconv1 = PointwiseConvolution(channels: 128, activation: relu, name: "block2_sepconv1")
let block2_sepconv2_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block2_sepconv2_sep")
let block2_sepconv2 = PointwiseConvolution(channels: 128, name: "block2_sepconv2")
let block2_pool = MaxPooling(kernel: (3, 3), stride: (2, 2), padding: .same, name: "block2_pool")
let conv2d_1 = Convolution(kernel: (1, 1), channels: 128, stride: (2, 2), name: "conv2d_1")
let block3_sepconv1_act = Activation(relu, name: "block3_sepconv1_act")
let block3_sepconv1_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block3_sepconv1_sep")
let block3_sepconv1 = PointwiseConvolution(channels: 256, activation: relu, name: "block3_sepconv1")
let block3_sepconv2_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block3_sepconv2_sep")
let block3_sepconv2 = PointwiseConvolution(channels: 256, name: "block3_sepconv2")
let block3_pool = MaxPooling(kernel: (3, 3), stride: (2, 2), padding: .same, name: "block3_pool")
let conv2d_2 = Convolution(kernel: (1, 1), channels: 256, stride: (2, 2), name: "conv2d_2")
let block4_sepconv1_act = Activation(relu, name: "block4_sepconv1_act")
let block4_sepconv1_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block4_sepconv1_sep")
let block4_sepconv1 = PointwiseConvolution(channels: 728, activation: relu, name: "block4_sepconv1")
let block4_sepconv2_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block4_sepconv2_sep")
let block4_sepconv2 = PointwiseConvolution(channels: 728, name: "block4_sepconv2")
let block4_pool = MaxPooling(kernel: (3, 3), stride: (2, 2), padding: .same, name: "block4_pool")
let conv2d_3 = Convolution(kernel: (1, 1), channels: 728, stride: (2, 2), name: "conv2d_3")
let block5_sepconv1_act = Activation(relu, name: "block5_sepconv1_act")
let block5_sepconv1_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block5_sepconv1_sep")
let block5_sepconv1 = PointwiseConvolution(channels: 728, activation: relu, name: "block5_sepconv1")
let block5_sepconv2_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block5_sepconv2_sep")
let block5_sepconv2 = PointwiseConvolution(channels: 728, activation: relu, name: "block5_sepconv2")
let block5_sepconv3_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block5_sepconv3_sep")
let block5_sepconv3 = PointwiseConvolution(channels: 728, name: "block5_sepconv3")
let block6_sepconv1_act = Activation(relu, name: "block6_sepconv1_act")
let block6_sepconv1_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block6_sepconv1_sep")
let block6_sepconv1 = PointwiseConvolution(channels: 728, activation: relu, name: "block6_sepconv1")
let block6_sepconv2_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block6_sepconv2_sep")
let block6_sepconv2 = PointwiseConvolution(channels: 728, activation: relu, name: "block6_sepconv2")
let block6_sepconv3_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block6_sepconv3_sep")
let block6_sepconv3 = PointwiseConvolution(channels: 728, name: "block6_sepconv3")
let block7_sepconv1_act = Activation(relu, name: "block7_sepconv1_act")
let block7_sepconv1_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block7_sepconv1_sep")
let block7_sepconv1 = PointwiseConvolution(channels: 728, activation: relu, name: "block7_sepconv1")
let block7_sepconv2_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block7_sepconv2_sep")
let block7_sepconv2 = PointwiseConvolution(channels: 728, activation: relu, name: "block7_sepconv2")
let block7_sepconv3_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block7_sepconv3_sep")
let block7_sepconv3 = PointwiseConvolution(channels: 728, name: "block7_sepconv3")
let block8_sepconv1_act = Activation(relu, name: "block8_sepconv1_act")
let block8_sepconv1_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block8_sepconv1_sep")
let block8_sepconv1 = PointwiseConvolution(channels: 728, activation: relu, name: "block8_sepconv1")
let block8_sepconv2_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block8_sepconv2_sep")
let block8_sepconv2 = PointwiseConvolution(channels: 728, activation: relu, name: "block8_sepconv2")
let block8_sepconv3_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block8_sepconv3_sep")
let block8_sepconv3 = PointwiseConvolution(channels: 728, name: "block8_sepconv3")
let block9_sepconv1_act = Activation(relu, name: "block9_sepconv1_act")
let block9_sepconv1_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block9_sepconv1_sep")
let block9_sepconv1 = PointwiseConvolution(channels: 728, activation: relu, name: "block9_sepconv1")
let block9_sepconv2_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block9_sepconv2_sep")
let block9_sepconv2 = PointwiseConvolution(channels: 728, activation: relu, name: "block9_sepconv2")
let block9_sepconv3_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block9_sepconv3_sep")
let block9_sepconv3 = PointwiseConvolution(channels: 728, name: "block9_sepconv3")
let block10_sepconv1_act = Activation(relu, name: "block10_sepconv1_act")
let block10_sepconv1_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block10_sepconv1_sep")
let block10_sepconv1 = PointwiseConvolution(channels: 728, activation: relu, name: "block10_sepconv1")
let block10_sepconv2_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block10_sepconv2_sep")
let block10_sepconv2 = PointwiseConvolution(channels: 728, activation: relu, name: "block10_sepconv2")
let block10_sepconv3_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block10_sepconv3_sep")
let block10_sepconv3 = PointwiseConvolution(channels: 728, name: "block10_sepconv3")
let block11_sepconv1_act = Activation(relu, name: "block11_sepconv1_act")
let block11_sepconv1_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block11_sepconv1_sep")
let block11_sepconv1 = PointwiseConvolution(channels: 728, activation: relu, name: "block11_sepconv1")
let block11_sepconv2_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block11_sepconv2_sep")
let block11_sepconv2 = PointwiseConvolution(channels: 728, activation: relu, name: "block11_sepconv2")
let block11_sepconv3_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block11_sepconv3_sep")
let block11_sepconv3 = PointwiseConvolution(channels: 728, name: "block11_sepconv3")
let block12_sepconv1_act = Activation(relu, name: "block12_sepconv1_act")
let block12_sepconv1_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block12_sepconv1_sep")
let block12_sepconv1 = PointwiseConvolution(channels: 728, activation: relu, name: "block12_sepconv1")
let block12_sepconv2_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block12_sepconv2_sep")
let block12_sepconv2 = PointwiseConvolution(channels: 728, activation: relu, name: "block12_sepconv2")
let block12_sepconv3_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block12_sepconv3_sep")
let block12_sepconv3 = PointwiseConvolution(channels: 728, name: "block12_sepconv3")
let block13_sepconv1_act = Activation(relu, name: "block13_sepconv1_act")
let block13_sepconv1_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block13_sepconv1_sep")
let block13_sepconv1 = PointwiseConvolution(channels: 728, activation: relu, name: "block13_sepconv1")
let block13_sepconv2_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block13_sepconv2_sep")
let block13_sepconv2 = PointwiseConvolution(channels: 1024, name: "block13_sepconv2")
let block13_pool = MaxPooling(kernel: (3, 3), stride: (2, 2), padding: .same, name: "block13_pool")
let conv2d_4 = Convolution(kernel: (1, 1), channels: 1024, stride: (2, 2), name: "conv2d_4")
let block14_sepconv1_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block14_sepconv1_sep")
let block14_sepconv1 = PointwiseConvolution(channels: 1536, activation: relu, name: "block14_sepconv1")
let block14_sepconv2_sep = DepthwiseConvolution(kernel: (3, 3), useBias: false, name: "block14_sepconv2_sep")
let block14_sepconv2 = PointwiseConvolution(channels: 2048, activation: relu, name: "block14_sepconv2")
let avg_pool = GlobalAveragePooling(name: "avg_pool", useBias: false)
let predictions = Dense(neurons: 1000, name: "predictions")

do {
let block1_conv2 = input_2 --> block1_conv1 --> block1_conv2
let conv2d_1 = block1_conv2 --> conv2d_1
let block2_pool = block1_conv2 --> block2_sepconv1_sep --> block2_sepconv1 --> block2_sepconv2_sep --> block2_sepconv2
         --> block2_pool
let add_1 = Collect([block2_pool, conv2d_1], name: "for_add_1") --> Add(name: "add_1")
let block3_pool = add_1 --> block3_sepconv1_act --> block3_sepconv1_sep --> block3_sepconv1
         --> block3_sepconv2_sep --> block3_sepconv2 --> block3_pool
let conv2d_2 = add_1 --> conv2d_2
let add_2 = Collect([block3_pool, conv2d_2], name: "for_add_2") --> Add(name: "add_2")
let conv2d_3 = add_2 --> conv2d_3
let block4_pool = add_2 --> block4_sepconv1_act --> block4_sepconv1_sep --> block4_sepconv1
         --> block4_sepconv2_sep --> block4_sepconv2 --> block4_pool
let add_3 = Collect([block4_pool, conv2d_3], name: "for_add_3") --> Add(name: "add_3")
let block5_sepconv3 = add_3 --> block5_sepconv1_act --> block5_sepconv1_sep --> block5_sepconv1
         --> block5_sepconv2_sep --> block5_sepconv2 --> block5_sepconv3_sep --> block5_sepconv3
        
let add_4 = Collect([block5_sepconv3, add_3], name: "for_add_4") --> Add(name: "add_4")
let block6_sepconv3 = add_4 --> block6_sepconv1_act --> block6_sepconv1_sep --> block6_sepconv1
         --> block6_sepconv2_sep --> block6_sepconv2 --> block6_sepconv3_sep --> block6_sepconv3
        
let add_5 = Collect([block6_sepconv3, add_4], name: "for_add_5") --> Add(name: "add_5")
let block7_sepconv3 = add_5 --> block7_sepconv1_act --> block7_sepconv1_sep --> block7_sepconv1
         --> block7_sepconv2_sep --> block7_sepconv2 --> block7_sepconv3_sep --> block7_sepconv3
        
let add_6 = Collect([block7_sepconv3, add_5], name: "for_add_6") --> Add(name: "add_6")
let block8_sepconv3 = add_6 --> block8_sepconv1_act --> block8_sepconv1_sep --> block8_sepconv1
         --> block8_sepconv2_sep --> block8_sepconv2 --> block8_sepconv3_sep --> block8_sepconv3
        
let add_7 = Collect([block8_sepconv3, add_6], name: "for_add_7") --> Add(name: "add_7")
let block9_sepconv3 = add_7 --> block9_sepconv1_act --> block9_sepconv1_sep --> block9_sepconv1
         --> block9_sepconv2_sep --> block9_sepconv2 --> block9_sepconv3_sep --> block9_sepconv3
        
let add_8 = Collect([block9_sepconv3, add_7], name: "for_add_8") --> Add(name: "add_8")
let block10_sepconv3 = add_8 --> block10_sepconv1_act --> block10_sepconv1_sep --> block10_sepconv1
         --> block10_sepconv2_sep --> block10_sepconv2 --> block10_sepconv3_sep --> block10_sepconv3
        
let add_9 = Collect([block10_sepconv3, add_8], name: "for_add_9") --> Add(name: "add_9")
let block11_sepconv3 = add_9 --> block11_sepconv1_act --> block11_sepconv1_sep --> block11_sepconv1
         --> block11_sepconv2_sep --> block11_sepconv2 --> block11_sepconv3_sep --> block11_sepconv3
        
let add_10 = Collect([block11_sepconv3, add_9], name: "for_add_10") --> Add(name: "add_10")
let block12_sepconv3 = add_10 --> block12_sepconv1_act --> block12_sepconv1_sep --> block12_sepconv1
         --> block12_sepconv2_sep --> block12_sepconv2 --> block12_sepconv3_sep --> block12_sepconv3
        
let add_11 = Collect([block12_sepconv3, add_10], name: "for_add_11") --> Add(name: "add_11")
let block13_pool = add_11 --> block13_sepconv1_act --> block13_sepconv1_sep --> block13_sepconv1
         --> block13_sepconv2_sep --> block13_sepconv2 --> block13_pool
let conv2d_4 = add_11 --> conv2d_4
let add_12 = Collect([block13_pool, conv2d_4], name: "for_add_12") --> Add(name: "add_12")
let predictions = add_12 --> block14_sepconv1_sep --> block14_sepconv1 --> block14_sepconv2_sep --> block14_sepconv2
         --> avg_pool --> predictions
let output = predictions --> Softmax()
model = Model(input: input, output: output)
}
} // init
public func compile(inflightBuffers: Int) -> Bool {
return model.compile(device: device, inflightBuffers: inflightBuffers) { 
  name, count, type in ParameterLoaderBundle(name: name,
  count: count,
  prefix: "xception-",
  suffix: type == .weights ? ".weights" : ".biases",
  ext: "bin")
}
} // func
} // class

// end of autogenerated forge net generation code
