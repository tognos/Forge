
//
//  Begin of autogenerated swift source code
//
//  TinyYolo.swift
//
//  created 2017-09-28 23:16 by keras2metal.py
//
//  Converter wittenn by Pavel Mayer, Tognos GmbH, http://tognos.com/
//  based on YADK and Forge yolo2metal.py
//

import Foundation
import Forge
import MetalPerformanceShaders

class TinyYolo {

var model: Model
var device: MTLDevice
let name = "tiny_yolo"

public init(device: MTLDevice) {
  self.device = device

let leaky = MPSCNNNeuronReLU(device: device, a: 0.10000)
let input_scale = MPSCNNNeuronLinear(device: device, a: 2, b: -1)
let input = Input()
let input_1 = input --> Resize(width: 416, height: 416) --> Activation(input_scale, name: "input_scale")
let conv2d_1 = Convolution(kernel: (3, 3), channels: 16, activation: leaky, name: "conv2d_1")
let max_pooling2d_1 = MaxPooling(kernel: (2, 2), stride: (2, 2), padding: .same, name: "max_pooling2d_1")
let conv2d_2 = Convolution(kernel: (3, 3), channels: 32, activation: leaky, name: "conv2d_2")
let max_pooling2d_2 = MaxPooling(kernel: (2, 2), stride: (2, 2), padding: .same, name: "max_pooling2d_2")
let conv2d_3 = Convolution(kernel: (3, 3), channels: 64, activation: leaky, name: "conv2d_3")
let max_pooling2d_3 = MaxPooling(kernel: (2, 2), stride: (2, 2), padding: .same, name: "max_pooling2d_3")
let conv2d_4 = Convolution(kernel: (3, 3), channels: 128, activation: leaky, name: "conv2d_4")
let max_pooling2d_4 = MaxPooling(kernel: (2, 2), stride: (2, 2), padding: .same, name: "max_pooling2d_4")
let conv2d_5 = Convolution(kernel: (3, 3), channels: 256, activation: leaky, name: "conv2d_5")
let max_pooling2d_5 = MaxPooling(kernel: (2, 2), stride: (2, 2), padding: .same, name: "max_pooling2d_5")
let conv2d_6 = Convolution(kernel: (3, 3), channels: 512, activation: leaky, name: "conv2d_6")
let max_pooling2d_6 = MaxPooling(kernel: (2, 2), stride: (1, 1), padding: .same, name: "max_pooling2d_6")
let conv2d_7 = Convolution(kernel: (3, 3), channels: 1024, activation: leaky, name: "conv2d_7")
let conv2d_8 = Convolution(kernel: (3, 3), channels: 1024, activation: leaky, name: "conv2d_8")
let conv2d_9 = Convolution(kernel: (1, 1), channels: 125, name: "conv2d_9")

do {
let conv2d_9 = input_1 --> conv2d_1 --> max_pooling2d_1 --> conv2d_2 --> max_pooling2d_2
         --> conv2d_3 --> max_pooling2d_3 --> conv2d_4 --> max_pooling2d_4 --> conv2d_5
         --> max_pooling2d_5 --> conv2d_6 --> max_pooling2d_6 --> conv2d_7 --> conv2d_8
         --> conv2d_9
let output = conv2d_9
model = Model(input: input, output: output)
}
} // init
public func compile(inflightBuffers: Int) -> Bool {
return model.compile(device: device, inflightBuffers: inflightBuffers) { 
  name, count, type in ParameterLoaderBundle(name: name,
  count: count,
  prefix: "tiny_yolo-",
  suffix: type == .weights ? ".weights" : ".biases",
  ext: "bin")
}
} // func
} // class

// end of autogenerated forge net generation code
